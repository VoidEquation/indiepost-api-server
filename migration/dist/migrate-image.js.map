{"version":3,"sources":["migrate-image.js"],"names":["Promise","require","path","mysql","randomstring","fs","promisifyAll","module","exports","OLD_BASE_PATH","NEW_BASE_PATH","NEW_BASE_URL","SELECT_TITLE_IMAGES_QUERY","SELECT_CONTENT_IMAGES_QUERY","UPDATE_TITLE_IMAGE_QUERY","UPDATE_CONTENT_IMAGE_QUERY","getImagesFromDb","conn","query","console","log","then","imagesArray","rows","forEach","row","newFileName","generate","length","charset","extension","data","split","newFileUrl","join","date","substring","push","oldFilePath","newFilePath","no","all","copyFile","dirname","mkdirsAsync","catch","finally","copyAsync","err","updateImagesAndDb","each","image","index","sql","format","copyImages","migrate","end"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,QAAQF,QAAQ,OAAR,CAAd;AACA,IAAMG,eAAeH,QAAQ,cAAR,CAArB;AACA;AACA,IAAII,KAAKJ,QAAQ,UAAR,CAAT;;AAEAD,QAAQM,YAAR,CAAqBD,EAArB;AACA;;AAEAE,OAAOC,OAAP,GAAkB,YAAW;AACzB,QAAMC,gBAAgB,mBAAtB;AACA,QAAMC,gBAAgB,OAAtB;AACA,QAAMC,eAAe,iBAArB;AACA,QAAMC,4BAA4B,+DAAlC;AACA,QAAMC,8BAA8B,8IAApC;AACA,QAAMC,2BAA2B,kDAAjC;AACA,QAAMC,6BAA6B,6CAAnC;;AAEA,aAASC,eAAT,CAAyBC,IAAzB,EAA+BC,KAA/B,EAAsC;AAClCC,gBAAQC,GAAR,CAAYF,KAAZ;AACA,eAAOD,KAAKC,KAAL,CAAWA,KAAX,EAAkBG,IAAlB,CAAuB,gBAAQ;AAClC,gBAAIC,cAAc,EAAlB;AACAC,iBAAKC,OAAL,CAAa,UAACC,GAAD,EAAS;AAClB,oBAAIC,cAActB,aAAauB,QAAb,CAAsB;AACpCC,4BAAQ,CAD4B;AAEpCC,6BAAS;AAF2B,iBAAtB,CAAlB;AAIA,oBAAIC,YAAYL,IAAIM,IAAJ,CAASC,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAhB;AACAN,8BAAcA,cAAc,GAAd,GAAoBI,SAAlC;AACA,oBAAIG,aAAa/B,KAAKgC,IAAL,CAAUvB,YAAV,EAAwBc,IAAIU,IAAJ,CAASC,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,CAAxB,EAAkDX,IAAIU,IAAJ,CAASC,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,CAAlD,EAA4EV,WAA5E,CAAjB;AACAJ,4BAAYe,IAAZ,CAAiB;AACbC,iCAAapC,KAAKgC,IAAL,CAAUzB,aAAV,EAAyBgB,IAAIM,IAA7B,CADA;AAEbE,gCAAYA,UAFC;AAGbM,iCAAarC,KAAKgC,IAAL,CAAUxB,aAAV,EAAyBuB,UAAzB,CAHA;AAIbO,wBAAIf,IAAIe;AAJK,iBAAjB;AAMH,aAdD;AAeA,mBAAOxC,QAAQyC,GAAR,CAAYnB,WAAZ,CAAP;AACH,SAlBM,CAAP;AAmBH;;AAED,aAASoB,QAAT,CAAkBJ,WAAlB,EAA+BC,WAA/B,EAA4C;AACxC,YAAII,UAAUzC,KAAKyC,OAAL,CAAaJ,WAAb,CAAd;AACA,eAAOlC,GAAGuC,WAAH,CAAeD,OAAf,EAAwBE,KAAxB,CAA8B,eAAO;AACxC1B,oBAAQC,GAAR,CAAY,+BAA+BuB,OAA3C;AACH,SAFM,EAEJG,OAFI,CAEI,YAAM;AACb,mBAAOzC,GAAG0C,SAAH,CAAaT,WAAb,EAA0BC,WAA1B,EACFlB,IADE,CACG,YAAM;AACRF,wBAAQC,GAAR,CAAY,WAAWkB,WAAX,GAAyB,MAAzB,GAAkCC,WAA9C;AACH,aAHE,EAIFM,KAJE,CAII,UAACG,GAAD,EAAS;AACZ7B,wBAAQC,GAAR,CAAY4B,GAAZ;AACH,aANE,CAAP;AAOH,SAVM,CAAP;AAWH;;AAED,aAASC,iBAAT,CAA2B3B,WAA3B,EAAwCL,IAAxC,EAA8CC,KAA9C,EAAqD;AACjD,eAAOlB,QAAQkD,IAAR,CAAa5B,WAAb,EAA0B,UAAC6B,KAAD,EAAQC,KAAR,EAAexB,MAAf,EAA0B;AACvD,gBAAIyB,MAAMlD,MAAMmD,MAAN,CAAapC,KAAb,EAAoB,CAACiC,MAAMlB,UAAP,EAAmBkB,MAAMX,EAAzB,CAApB,CAAV;AACArB,oBAAQC,GAAR,CAAYiC,GAAZ;AACA,mBAAOpC,KAAKC,KAAL,CAAWmC,GAAX,CAAP;AACH,SAJM,CAAP;AAKH;;AAED,aAASE,UAAT,CAAoBjC,WAApB,EAAiC;AAC7B,eAAOtB,QAAQkD,IAAR,CAAa5B,WAAb,EAA0B,UAAC6B,KAAD,EAAQC,KAAR,EAAexB,MAAf,EAA0B;AACvD,mBAAOc,SAASS,MAAMb,WAAf,EAA4Ba,MAAMZ,WAAlC,CAAP;AACH,SAFM,CAAP;AAGH;;AAED,aAASiB,OAAT,CAAiBvC,IAAjB,EAAuB;AACnB,eAAOjB,QAAQyC,GAAR,CAAY,CACfzB,gBAAgBC,IAAhB,EAAsBL,yBAAtB,EACKS,IADL,CACU,uBAAe;AACjB,mBAAO4B,kBAAkB3B,WAAlB,EAA+BL,IAA/B,EAAqCH,wBAArC,CAAP;AACH,SAHL,EAIKO,IAJL,CAIU,uBAAe;AACjB,mBAAOkC,WAAWjC,WAAX,CAAP;AACH,SANL,CADe,EAQfN,gBAAgBC,IAAhB,EAAsBJ,2BAAtB,EACKQ,IADL,CACU,uBAAe;AACjB,mBAAO4B,kBAAkB3B,WAAlB,EAA+BL,IAA/B,EAAqCF,0BAArC,CAAP;AACH,SAHL,EAIKM,IAJL,CAIU,uBAAe;AACjB,mBAAOkC,WAAWjC,WAAX,CAAP;AACH,SANL,CARe,CAAZ,EAgBJuB,KAhBI,CAgBE,eAAO;AACZ1B,oBAAQC,GAAR,CAAY4B,GAAZ;AACH,SAlBM,EAkBJF,OAlBI,CAkBI,YAAM;AACT7B,iBAAKwC,GAAL;AACP,SApBM,CAAP;AAqBH;;AAED,WAAO;AACHD,iBAASA;AADN,KAAP;AAGH,CAxFgB,EAAjB","file":"migrate-image.js","sourcesContent":["const Promise = require('bluebird');\nconst path = require('path');\nconst mysql = require('mysql');\nconst randomstring = require('randomstring');\n// let gm = require('gm');\nlet fs = require('fs-extra');\n\nPromise.promisifyAll(fs);\n// Promise.promisifyAll(gm.prototype);\n\nmodule.exports = (function() {\n    const OLD_BASE_PATH = '/home/jake/backup';\n    const NEW_BASE_PATH = '/data';\n    const NEW_BASE_URL = '/uploads/images';\n    const SELECT_TITLE_IMAGES_QUERY = 'SELECT no, IMAGEURL as data, REGDATE as date FROM contentlist';\n    const SELECT_CONTENT_IMAGES_QUERY = 'SELECT d.no, d.data, c.REGDATE as date FROM contentlist AS c INNER JOIN detaillist AS d ON c.no = d.parent WHERE d.type = 2 AND d.iorder > 2';\n    const UPDATE_TITLE_IMAGE_QUERY = 'UPDATE contentlist SET IMAGEURL = ? WHERE NO = ?';\n    const UPDATE_CONTENT_IMAGE_QUERY = 'UPDATE detaillist SET data = ? WHERE NO = ?';\n\n    function getImagesFromDb(conn, query) {\n        console.log(query);\n        return conn.query(query).then(rows => {\n            let imagesArray = [];\n            rows.forEach((row) => {\n                let newFileName = randomstring.generate({\n                    length: 6,\n                    charset: 'alphanumeric'\n                });\n                let extension = row.data.split('.')[1];\n                newFileName = newFileName + '.' + extension;\n                let newFileUrl = path.join(NEW_BASE_URL, row.date.substring(0, 4), row.date.substring(4, 6), newFileName);\n                imagesArray.push({\n                    oldFilePath: path.join(OLD_BASE_PATH, row.data),\n                    newFileUrl: newFileUrl,\n                    newFilePath: path.join(NEW_BASE_PATH, newFileUrl),\n                    no: row.no\n                });\n            });\n            return Promise.all(imagesArray);\n        });\n    }\n\n    function copyFile(oldFilePath, newFilePath) {\n        let dirname = path.dirname(newFilePath);\n        return fs.mkdirsAsync(dirname).catch(err => {\n            console.log('directory already exists: ' + dirname)\n        }).finally(() => {\n            return fs.copyAsync(oldFilePath, newFilePath)\n                .then(() => {\n                    console.log('copy: ' + oldFilePath + ' -> ' + newFilePath);\n                })\n                .catch((err) => {\n                    console.log(err);\n                })\n        });\n    }\n\n    function updateImagesAndDb(imagesArray, conn, query) {\n        return Promise.each(imagesArray, (image, index, length) => {\n            let sql = mysql.format(query, [image.newFileUrl, image.no]);\n            console.log(sql);\n            return conn.query(sql);\n        });\n    }\n\n    function copyImages(imagesArray) {\n        return Promise.each(imagesArray, (image, index, length) => {\n            return copyFile(image.oldFilePath, image.newFilePath);\n        });\n    }\n\n    function migrate(conn) {\n        return Promise.all([\n            getImagesFromDb(conn, SELECT_TITLE_IMAGES_QUERY)\n                .then(imagesArray => {\n                    return updateImagesAndDb(imagesArray, conn, UPDATE_TITLE_IMAGE_QUERY);\n                })\n                .then(imagesArray => {\n                    return copyImages(imagesArray);\n                }),\n            getImagesFromDb(conn, SELECT_CONTENT_IMAGES_QUERY)\n                .then(imagesArray => {\n                    return updateImagesAndDb(imagesArray, conn, UPDATE_CONTENT_IMAGE_QUERY);\n                })\n                .then(imagesArray => {\n                    return copyImages(imagesArray);\n                })\n\n        ]).catch(err => {\n            console.log(err);\n        }).finally(() => {\n                conn.end();\n        });\n    }\n\n    return {\n        migrate: migrate\n    }\n})();"],"sourceRoot":"../src"}