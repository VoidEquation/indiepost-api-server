{"version":3,"sources":["image-migration.js"],"names":["Promise","require","path","mysql","randomstring","sharp","fs","spawn","promisifyAll","module","exports","selectFromDB","pool","query","console","log","makeImagesArray","rows","oldBasePath","map","oldFilePath","join","row","data","no","date","updateDB","imagesArray","each","image","index","length","sql","format","newFileUrl","width","height","thumbnailUrl","makeNewFilenames","newBasePath","newBaseUrl","metadata","then","newFileStr","generate","charset","newFileName","thumbnail","baseDir","substring","newFilePath","thumbnailPath","makeDirectories","dirPath","dirname","mkdirsAsync","catch","copyImages","copyAsync","makeThumbnails","resize","crop","strategy","center","toFile","migrate","options","selectTitleImagesQuery","selectContentImagesQuery","updateTitleImageQuery","updateContentImageQuery","all"],"mappings":"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","file":"image-migration.js","sourcesContent":["const Promise = require('bluebird');\nconst path = require('path');\nconst mysql = require('mysql');\nconst randomstring = require('randomstring');\nconst sharp = require('sharp');\nconst fs = require('fs-extra');\nconst spawn = require('child_process').spawn;\n\nPromise.promisifyAll(fs);\n\nmodule.exports = (()=> {\n\n    function selectFromDB(pool, query) {\n        console.log('query: ' + query);\n        return pool.query(query);\n    }\n\n    function makeImagesArray(rows, oldBasePath) {\n        return Promise.map(rows, row => {\n            return {\n                oldFilePath: path.join(oldBasePath, row.data),\n                no: row.no,\n                date: row.date\n            };\n        });\n    }\n\n    function updateDB(imagesArray, pool, query) {\n        return Promise.each(imagesArray, (image, index, length) => {\n            let sql = mysql.format(query, [image.newFileUrl, image.width, image.height, image.thumbnailUrl, image.no]);\n            console.log('query: ' + sql);\n            return pool.query(sql);\n        });\n    }\n\n    function makeNewFilenames(imagesArray, newBasePath, newBaseUrl) {\n        return Promise.map(imagesArray, image => {\n            return sharp(image.oldFilePath).metadata().then(metadata => {\n                let newFileStr = randomstring.generate({\n                    length: 6,\n                    charset: 'alphanumeric'\n                });\n                let newFileName = `${newFileStr}-${metadata.width}x${metadata.height}.${metadata.format}`;\n                let thumbnail = `${newFileStr}-120x80.${metadata.format}`;\n                let baseDir = path.join(newBaseUrl, image.date.substring(0, 4), image.date.substring(4, 6));\n                let newFileUrl = path.join(baseDir, newFileName);\n                thumbnail = path.join(baseDir, thumbnail);\n\n                return {\n                    oldFilePath: image.oldFilePath,\n                    newFilePath: path.join(newBasePath, newFileUrl),\n                    newFileUrl,\n                    newFileStr,\n                    width: metadata.width,\n                    height: metadata.height,\n                    thumbnailPath: path.join(newBasePath, thumbnail),\n                    thumbnailUrl: thumbnail,\n                    no: image.no\n                }\n            })\n        })\n    }\n\n    function makeDirectories(imagesArray) {\n        return Promise.each(imagesArray, (image, index, length) => {\n            let dirPath = path.dirname(image.newFilePath);\n            return fs.mkdirsAsync(dirPath).catch(err => {\n                console.log('directory already exists: ' + dirPath)\n            });\n        });\n    }\n\n    function copyImages(imagesArray) {\n        return Promise.each(imagesArray, (image, index, length) => {\n            return fs.copyAsync(image.oldFilePath, image.newFilePath)\n                .then(() => {\n                    console.log(`copy: ${image.oldFilePath} -> ${image.newFilePath}`);\n                })\n                .catch(console.log);\n        });\n    }\n\n    function makeThumbnails(imagesArray) {\n        return Promise.each(imagesArray, image => {\n            return sharp(image.oldFilePath)\n                .resize(120, 80)\n                .crop(sharp.strategy.center)\n                .toFile(image.thumbnailPath)\n                .then(() => {\n                    console.log('thumbnail: ' + image.thumbnailPath);\n                })\n                .catch(console.log);\n        });\n    }\n\n    function migrate(pool, options) {\n        let {\n            oldBasePath, newBasePath, newBaseUrl,\n            selectTitleImagesQuery, selectContentImagesQuery,\n            updateTitleImageQuery, updateContentImageQuery\n        } = options;\n        return Promise.all([\n            selectFromDB(pool, selectTitleImagesQuery)\n                .then(rows => {\n                    return makeImagesArray(rows, oldBasePath);\n                })\n                .then(imagesArray => {\n                    return makeNewFilenames(imagesArray, newBasePath, newBaseUrl);\n                })\n                .then(makeDirectories)\n                .then(imagesArray => {\n                    return Promise.all([\n                        copyImages(imagesArray),\n                        makeThumbnails(imagesArray),\n                        updateDB(imagesArray, pool, updateTitleImageQuery)\n                    ]);\n                }),\n            selectFromDB(pool, selectContentImagesQuery)\n                .then(rows => {\n                    return makeImagesArray(rows, oldBasePath);\n                })\n                .then(imagesArray => {\n                    return makeNewFilenames(imagesArray, newBasePath, newBaseUrl);\n                })\n                .then(makeDirectories)\n                .then(imagesArray => {\n                    return Promise.all([\n                        copyImages(imagesArray),\n                        makeThumbnails(imagesArray),\n                        updateDB(imagesArray, pool, updateContentImageQuery)\n                    ]);\n                })\n        ]).catch(console.log);\n    }\n\n    return { migrate };\n})();"],"sourceRoot":"../src"}