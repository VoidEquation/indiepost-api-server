{"version":3,"sources":["image-migration.js"],"names":["Promise","require","path","mysql","randomstring","sharp","fs","promisifyAll","module","exports","OLD_BASE_PATH","NEW_BASE_PATH","NEW_BASE_URL","SELECT_TITLE_IMAGES_QUERY","SELECT_CONTENT_IMAGES_QUERY","UPDATE_TITLE_IMAGE_QUERY","UPDATE_CONTENT_IMAGE_QUERY","getImagesFromDb","pool","query","console","log","then","map","rows","row","oldFilePath","join","data","no","date","updateDb","imagesArray","each","image","index","length","sql","format","newFileUrl","width","height","thumbnailUrl","makeNewFilenames","metadata","newFileStr","generate","charset","newFileName","thumbnail","baseDir","substring","newFilePath","thumbnailPath","makeDirectories","dirPath","dirname","mkdirsAsync","catch","copyImages","copyAsync","err","makeThumbnails","resize","crop","strategy","center","toFile","migrate","all"],"mappings":"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","file":"image-migration.js","sourcesContent":["const Promise = require('bluebird');\nconst path = require('path');\nconst mysql = require('mysql');\nconst randomstring = require('randomstring');\nconst sharp = require('sharp');\nconst fs = require('fs-extra');\n\nPromise.promisifyAll(fs);\n\nmodule.exports = (()=> {\n\n    const OLD_BASE_PATH = '/home/jake/backup';\n    const NEW_BASE_PATH = '/data';\n    const NEW_BASE_URL = '/uploads/images';\n    const SELECT_TITLE_IMAGES_QUERY = 'SELECT no, IMAGEURL as data, REGDATE as date FROM __contentlist';\n    const SELECT_CONTENT_IMAGES_QUERY = 'SELECT d.no, d.data, c.REGDATE as date FROM __contentlist AS c INNER JOIN __detaillist AS d ON c.no = d.parent WHERE d.type = 2 AND d.iorder > 2';\n    const UPDATE_TITLE_IMAGE_QUERY = 'UPDATE __contentlist SET IMAGEURL = ?, width = ?, height = ?, thumbnail = ? WHERE NO = ?';\n    const UPDATE_CONTENT_IMAGE_QUERY = 'UPDATE __detaillist SET data = ?, width = ?, height = ?, thumbnail = ? WHERE NO = ?';\n\n    function getImagesFromDb(pool, query) {\n        console.log('query: ' + query);\n        return pool.query(query).then(rows => {\n            return Promise.map(rows, (row) => {\n                return {\n                    oldFilePath: path.join(OLD_BASE_PATH, row.data),\n                    no: row.no,\n                    date: row.date\n                }\n            });\n        });\n    }\n\n    function updateDb(imagesArray, pool, query) {\n        return Promise.each(imagesArray, (image, index, length) => {\n            let sql = mysql.format(query, [image.newFileUrl, image.width, image.height, image.thumbnailUrl, image.no]);\n            console.log('query: ' + sql);\n            return pool.query(sql);\n        });\n    }\n\n    function makeNewFilenames(imagesArray) {\n        return Promise.map(imagesArray, image => {\n            return sharp(image.oldFilePath).metadata().then(metadata => {\n                let newFileStr = randomstring.generate({\n                    length: 6,\n                    charset: 'alphanumeric'\n                });\n                let newFileName = newFileStr + '-' + metadata.width + 'x' + metadata.height + '.' + metadata.format;\n                let thumbnail = newFileStr + '-' + '120' + 'x' + '80' + '.' + metadata.format;\n                let baseDir = path.join(NEW_BASE_URL, image.date.substring(0, 4), image.date.substring(4, 6));\n                let newFileUrl = path.join(baseDir, newFileName);\n                thumbnail = path.join(baseDir, thumbnail);\n\n                return {\n                    oldFilePath: image.oldFilePath,\n                    newFilePath: path.join(NEW_BASE_PATH, newFileUrl),\n                    newFileUrl: newFileUrl,\n                    newFileStr: newFileStr,\n                    width: metadata.width,\n                    height: metadata.height,\n                    thumbnailPath: path.join(NEW_BASE_PATH, thumbnail),\n                    thumbnailUrl: thumbnail,\n                    no: image.no\n                }\n            })\n        })\n    }\n\n    function makeDirectories(imagesArray) {\n        return Promise.each(imagesArray, (image, index, length) => {\n            let dirPath = path.dirname(image.newFilePath);\n            return fs.mkdirsAsync(dirPath).catch(err => {\n                console.log('directory already exists: ' + dirPath)\n            });\n        });\n    }\n\n    function copyImages(imagesArray) {\n        return Promise.each(imagesArray, (image, index, length) => {\n            return fs.copyAsync(image.oldFilePath, image.newFilePath)\n                .then(() => {\n                    console.log('copy: ' + image.oldFilePath + ' -> ' + image.newFilePath);\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n        });\n    }\n\n    function makeThumbnails(imagesArray) {\n        return Promise.each(imagesArray, image => {\n            return sharp(image.oldFilePath)\n                .resize(120, 80)\n                .crop(sharp.strategy.center)\n                .toFile(image.thumbnailPath)\n                .then(() => {\n                    console.log('thumbnail: ' + image.thumbnailPath);\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n        });\n    }\n\n    function migrate(pool) {\n        return Promise.all([\n            getImagesFromDb(pool, SELECT_TITLE_IMAGES_QUERY)\n                .then(makeNewFilenames)\n                .then(makeDirectories)\n                .then(imagesArray => {\n                    return Promise.all([copyImages(imagesArray), makeThumbnails(imagesArray), updateDb(imagesArray, pool, UPDATE_TITLE_IMAGE_QUERY)]);\n                }),\n            getImagesFromDb(pool, SELECT_CONTENT_IMAGES_QUERY)\n                .then(makeNewFilenames)\n                .then(makeDirectories)\n                .then(imagesArray => {\n                    return Promise.all([copyImages(imagesArray), makeThumbnails(imagesArray), updateDb(imagesArray, pool, UPDATE_CONTENT_IMAGE_QUERY)]);\n                })\n        ]).catch(console.log);\n    }\n\n    return {\n        migrate: migrate\n    };\n})();"],"sourceRoot":"../src"}